Script run on: Tue Oct 21 12:46:13 AM EDT 2025

====================
/home/logsleeve/vscodeCreo/vscodecreo/language-configuration.json
====================

{
    "lineComment": "!",
    "brackets": [
        ["{", "}"],
        ["[", "]"],
        ["(", ")"]
    ],
    "autoClosingPairs": [
        ["[", "]"],
        ["(", ")"],
        ["`", "`"],
        ["'", "'"]
    ],
    "surroundingPairs": [
        ["[", "]"],
        ["(", ")"],
        ["`", "`"],
        ["'", "'"],
        ["mapkey(continued) ", ";\\"]
    ]
}

====================
/home/logsleeve/vscodeCreo/vscodecreo/package.json
====================

{
  "name": "vscodecreo",
  "displayName": "vscodeCreo",
  "description": "vscode extension to provide support for Creo config files, mapkeys.pro, and ModelCHECK",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.105.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "contributes": {
    "languages": [
      {
        "id": "pro",
        "aliases": [
          "Creo Pro",
          "pro"
        ],
        "extensions": [
          ".pro",
          ".sup"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "pro",
        "scopeName": "source.pro",
        "path": "./syntaxes/pro.tmLanguage.json"
      }
    ]
  },
  "main": "./out/extension.js",
  "devDependencies": {
    "@types/node": "^24.8.1",
    "@types/vscode": "^1.105.0",
    "typescript": "^5.9.3"
  },
  "dependencies": {
    "vscode-languageserver": "^9.0.1",
    "vscode-languageserver-textdocument": "^1.0.12"
  }
}


====================
/home/logsleeve/vscodeCreo/vscodecreo/package-lock.json
====================

{
  "name": "vscodecreo",
  "version": "0.0.1",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "vscodecreo",
      "version": "0.0.1",
      "dependencies": {
        "vscode-languageserver": "^9.0.1",
        "vscode-languageserver-textdocument": "^1.0.12"
      },
      "devDependencies": {
        "@types/node": "^24.8.1",
        "@types/vscode": "^1.105.0",
        "typescript": "^5.9.3"
      },
      "engines": {
        "vscode": "^1.105.0"
      }
    },
    "node_modules/@types/node": {
      "version": "24.8.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.8.1.tgz",
      "integrity": "sha512-alv65KGRadQVfVcG69MuB4IzdYVpRwMG/mq8KWOaoOdyY617P5ivaDiMCGOFDWD2sAn5Q0mR3mRtUOgm99hL9Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.14.0"
      }
    },
    "node_modules/@types/vscode": {
      "version": "1.105.0",
      "resolved": "https://registry.npmjs.org/@types/vscode/-/vscode-1.105.0.tgz",
      "integrity": "sha512-Lotk3CTFlGZN8ray4VxJE7axIyLZZETQJVWi/lYoUVQuqfRxlQhVOfoejsD2V3dVXPSbS15ov5ZyowMAzgUqcw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/typescript": {
      "version": "5.9.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.3.tgz",
      "integrity": "sha512-jl1vZzPDinLr9eUt3J/t7V6FgNEw9QjvBPdysz9KfQDD41fQrC2Y4vKQdiaUpFT4bXlb1RHhLpp8wtm6M5TgSw==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "7.14.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.14.0.tgz",
      "integrity": "sha512-QQiYxHuyZ9gQUIrmPo3IA+hUl4KYk8uSA7cHrcKd/l3p1OTpZcM0Tbp9x7FAtXdAYhlasd60ncPpgu6ihG6TOA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/vscode-jsonrpc": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-8.2.0.tgz",
      "integrity": "sha512-C+r0eKJUIfiDIfwJhria30+TYWPtuHJXHtI7J0YlOmKAo7ogxP20T0zxB7HZQIFhIyvoBPwWskjxrvAtfjyZfA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/vscode-languageserver": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/vscode-languageserver/-/vscode-languageserver-9.0.1.tgz",
      "integrity": "sha512-woByF3PDpkHFUreUa7Hos7+pUWdeWMXRd26+ZX2A8cFx6v/JPTtd4/uN0/jB6XQHYaOlHbio03NTHCqrgG5n7g==",
      "license": "MIT",
      "dependencies": {
        "vscode-languageserver-protocol": "3.17.5"
      },
      "bin": {
        "installServerIntoExtension": "bin/installServerIntoExtension"
      }
    },
    "node_modules/vscode-languageserver-protocol": {
      "version": "3.17.5",
      "resolved": "https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.17.5.tgz",
      "integrity": "sha512-mb1bvRJN8SVznADSGWM9u/b07H7Ecg0I3OgXDuLdn307rl/J3A9YD6/eYOssqhecL27hK1IPZAsaqh00i/Jljg==",
      "license": "MIT",
      "dependencies": {
        "vscode-jsonrpc": "8.2.0",
        "vscode-languageserver-types": "3.17.5"
      }
    },
    "node_modules/vscode-languageserver-textdocument": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/vscode-languageserver-textdocument/-/vscode-languageserver-textdocument-1.0.12.tgz",
      "integrity": "sha512-cxWNPesCnQCcMPeenjKKsOCKQZ/L6Tv19DTRIGuLWe32lyzWhihGVJ/rcckZXJxfdKCFvRLS3fpBIsV/ZGX4zA==",
      "license": "MIT"
    },
    "node_modules/vscode-languageserver-types": {
      "version": "3.17.5",
      "resolved": "https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.5.tgz",
      "integrity": "sha512-Ld1VelNuX9pdF39h2Hgaeb5hEZM2Z3jUrrMgWQAu82jMtZp7p3vJT3BzToKtZI7NgQssZje5o0zryOrhQvzQAg==",
      "license": "MIT"
    }
  }
}


====================
/home/logsleeve/vscodeCreo/vscodecreo/src/extension.ts
====================

import * as vscode from 'vscode';
import { TokenAdapter } from './providers/tokenAdapter';
import { CreoHoverProvider } from './providers/hoverProvider';

export function activate(context: vscode.ExtensionContext) {
  const selector: vscode.DocumentSelector = [{ language: 'pro', scheme: 'file' }];

  const tokenizer = new TokenAdapter();

  context.subscriptions.push(
    vscode.languages.registerDocumentSemanticTokensProvider(
      selector,
      tokenizer,
      tokenizer.getLegend()
    )
  );

  context.subscriptions.push(
    vscode.languages.registerHoverProvider(selector, new CreoHoverProvider(tokenizer))
  );

  vscode.window.showInformationMessage('Creo Mapkey extension active: LSP tokenizer + hover ready.');
}

export function deactivate() {}


====================
/home/logsleeve/vscodeCreo/vscodecreo/src/providers/hoverProvider.ts
====================

import * as vscode from 'vscode';
import { TokenAdapter } from './tokenAdapter';

export class CreoHoverProvider implements vscode.HoverProvider {
  private tokenizer: TokenAdapter;

  constructor(tokenizer: TokenAdapter) {
    this.tokenizer = tokenizer;
  }

  async provideHover(
    document: vscode.TextDocument,
    position: vscode.Position,
    token: vscode.CancellationToken
  ): Promise<vscode.Hover | null> {
    const semanticTokens = await this.tokenizer.provideDocumentSemanticTokens(document, token);
    if (!semanticTokens) return null;

    const legend = this.tokenizer.getLegend();
    const data = semanticTokens.data;

    let currentLine = 0;
    let currentChar = 0;

    for (let i = 0; i < data.length; i += 5) {
      currentLine += data[i];
      currentChar = data[i] === 0 ? currentChar + data[i + 1] : data[i + 1];
      const length = data[i + 2];
      const tokenTypeIndex = data[i + 3];
      const tokenType = legend.tokenTypes[tokenTypeIndex];

      const start = new vscode.Position(currentLine, currentChar);
      const end = new vscode.Position(currentLine, currentChar + length);
      const range = new vscode.Range(start, end);

      if (range.contains(position)) {
        const tokenText = document.getText(range);
        const hoverMessage = new vscode.MarkdownString();
        hoverMessage.appendCodeblock(tokenText, 'plaintext');
        hoverMessage.appendMarkdown(`**Token:** \`${tokenType}\`\n`);
        hoverMessage.appendMarkdown(`Line: ${currentLine}, Col: ${currentChar}`);

        return new vscode.Hover(hoverMessage, range);
      }
    }

    return null;
  }
}


====================
/home/logsleeve/vscodeCreo/vscodecreo/src/providers/tokenAdapter.ts
====================

import * as vscode from 'vscode';
import { tokenize } from '../server/tokenizer';

export class TokenAdapter implements vscode.DocumentSemanticTokensProvider {
  private legend: vscode.SemanticTokensLegend;

  constructor() {
    const tokenTypes = [
      'mapkey.declaration',
      'mapkey.begin',
      'mapkey.name',
      'mapkey.line.begin',
      'mapkey.line.break',
      'mapkey.line.end',
      'mapkey.tag.label',
      'mapkey.tag.description'
    ];

    this.legend = new vscode.SemanticTokensLegend(tokenTypes, []);
  }

  getLegend(): vscode.SemanticTokensLegend {
    return this.legend;
  }

  async provideDocumentSemanticTokens(
    document: vscode.TextDocument,
    _token: vscode.CancellationToken
  ): Promise<vscode.SemanticTokens> {
    const text = document.getText();
    const tokens = tokenize(text);

    const builder = new vscode.SemanticTokensBuilder(this.legend);

    for (const t of tokens) {
      const startPos = document.positionAt(t.start);
      const endPos = document.positionAt(t.end);
      const line = startPos.line;
      const char = startPos.character;
      const length = endPos.character - startPos.character;

      const tokenTypeIndex = this.legend.tokenTypes.indexOf(t.type);
      if (tokenTypeIndex === -1) continue; // skip unknown token types

      builder.push(line, char, length, tokenTypeIndex, 0);
    }

    return builder.build();
  }
}


====================
/home/logsleeve/vscodeCreo/vscodecreo/src/server/tokenizer.ts
====================

/**
 * Master Tokenizer for LSP
 * ------------------------
 * This defines all tokens used throughout your language server.
 * Each token includes a unique name and a regex.
 */

export interface TokenDefinition {
  type: string;
  regex: RegExp;
  groups?: { type: string; index: number }[];
}

export interface Token {
  type: string;
  value: string;
  start: number;
  end: number;
}

/**
 * Step 1: Define your tokens here.
 * Copy/paste this section to add new tokens.
 */
export const TOKEN_DEFINITIONS: TokenDefinition[] = [
  {
    type: "mapkey.declaration", // the whole "mapkey ..." line
    regex: /^(mapkey\s+)([^;\s]+[^;]*?)/gm,
    groups: [
      { type: "mapkey.begin", index: 1 },
      { type: "mapkey.name", index: 2 },
    ],
  },
  {
    type: "mapkey.line.begin",
    regex: /^mapkey\(continued\)/
  },
  {
    type: "mapkey.line.break",
    regex: /[\\]$/
  },
  {
    type: "mapkey.line.end",
    regex: /\;\\$/
  },
  {
    type: "mapkey.tag.label",
    regex: /(\s@MAPKEY_LABEL)/
  },
  {
    type: "mapkey.tag.description",
    regex: /(\s@MAPKEY_NAME)/
  }
  // Add more token types below as needed
];

/**
 * Step 2: Tokenize input text using all definitions.
 */
export function tokenize(text: string): Token[] {
  const tokens: Token[] = [];

  for (const def of TOKEN_DEFINITIONS) {
    const { regex, groups } = def as any;
    regex.lastIndex = 0;
    let match: RegExpExecArray | null;

    while ((match = regex.exec(text)) !== null) {
      // If no subgroup definitions, treat whole match as one token
      if (!groups) {
        tokens.push({
          type: def.type,
          value: match[0],
          start: match.index,
          end: match.index + match[0].length,
        });
        continue;
      }

      // Extract defined capture groups as distinct tokens
      for (const g of groups) {
        const value = match[g.index];
        if (!value) continue;
        const start = text.indexOf(value, match.index); // find group offset
        tokens.push({
          type: g.type,
          value,
          start,
          end: start + value.length,
        });
      }
    }
  }

  let result = tokens.sort((a, b) => a.start - b.start);
    result = mergeMultilineMapkeyNames(text, result);
    return result;


  // return tokens.sort((a, b) => a.start - b.start);
}
/**
 * Merge Multiline mapkeys
 */
/**
 * Merge multiline @MAPKEY_NAME tokens
 * -----------------------------------
 * If a description/value continues past a line break (\)
 * until the next line.end token (;\\$), merge them.
 * Also ignore any "mapkey(continued)" tokens found in between.
 */
export function mergeMultilineMapkeyNames(text: string, tokens: Token[]): Token[] {
  const merged: Token[] = [];
  let i = 0;

  while (i < tokens.length) {
    const token = tokens[i];

    // Detect start of a @MAPKEY_NAME sequence
    if (token.type === "mapkey.tag.description") {
      let value = token.value;
      let start = token.start;
      let end = token.end;

      // Move forward while lines continue
      while (
        tokens[i + 1] &&
        tokens[i + 1].type === "mapkey.line.break"
      ) {
        // skip the break token
        i++;

        // skip any "mapkey(continued)" markers
        while (
          tokens[i + 1] &&
          tokens[i + 1].type === "mapkey.line.begin"
        ) i++;

        // append until we find line.end
        if (tokens[i + 1] && tokens[i + 1].type !== "mapkey.line.end") {
          i++;
          value += "\n" + tokens[i].value;
          end = tokens[i].end;
        }
      }

      merged.push({ type: token.type, value, start, end });
    } else {
      // keep unchanged
      merged.push(token);
    }

    i++;
  }

  return merged;
}


/**
 * Step 3: Optional helper for hover or diagnostics.
 */
export function getTokenAtPosition(text: string, position: number): Token | null {
  const tokens = tokenize(text);
  return tokens.find(t => position >= t.start && position < t.end) || null;
}

// export { tokenize, getTokenAtPosition };


====================
/home/logsleeve/vscodeCreo/vscodecreo/syntaxes/pro.tmLanguage.json
====================

{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Creo Pro",
  "scopeName": "source.pro",

  "repository": {
    "mapkey-init":{
      "begin": "^(mapkey\\s+)([^;\\s]+[^;]*?)",
      "beginCaptures": { 
        "1": { "name": "keyword.control"},
        "2": { "name": "markup.bold"}
      },
      "end": "\\s",
      "name": "meta"
    },
    "mapkey-definition": {
      "begin": "(@MAPKEY_LABEL|@MAPKEY_NAME)",
      "beginCaptures": {
        "1": { "name": "keyword.control" }
      },
      "end": "(?<!\\\\)$",
      "name": "meta",
      "patterns": [
        {
          "match": "(.+)(?=\\\\$)",
          "captures": {
            "1": { "name": "markup.bold" }
          }
        },
        {
          "begin": "^(?:mapkey\\(continued\\)\\s*)?",
          "while": "^(?:mapkey\\(continued\\)\\s*)?.*\\\\$",
          "end": ";",
          "patterns": [
            {
              "match": "(?!mapkey\\(continued\\))(.*)",
              "captures": {
                "1": { "name": "markup.bold." }
              }
            }
          ]
        }
      ]
    },
    "mapkey-continued": {
      "match": "^mapkey\\(continued\\)",
      "name": "entity.name.function"
    },
    "mapkey-syscmd": {
      "match": "(@MANUAL_PAUSE|@SYSTEM)",
      "name": "storage.modifier"
    },   
    "mapkey-body": {
      "begin": "(~\\s\\w+|(?<=^mapkey\\(continued\\)\\s)`\\S+`?)([^;\\\\]+)(?=;|\\\\;|\\\\$)",
      "beginCaptures": {
        "1":{ "name": "string.regexp"},
        "2":{ "name": "variable.parameter"}
      },
      "end": ";",
      "name": "meta.mapkey.content"    
    }
  },
  "patterns": [
    { "name": "comment.line",      "match": "!.*$" },
    { "name": "constant.numeric",  "match": "\\b\\-{0,1}\\d+\\b" },
    { "include": "#mapkey-init" },
    { "include": "#mapkey-definition" },
    { "include": "#mapkey-continued" },
    { "include": "#mapkey-syscmd" },
    { "include": "#mapkey-body" }
  ]
}


====================
/home/logsleeve/vscodeCreo/vscodecreo/tsconfig.json
====================

{
  "compilerOptions": {
    "module": "commonjs",
    "target": "ES2020",
    "lib": ["ES2020"],
    "outDir": "out",
    "rootDir": "src",
    "strict": true,
    "noImplicitAny": true,
    "moduleResolution": "node",
    "sourceMap": true,
    "esModuleInterop": true,
    "skipLibCheck": true
  },
  "exclude": ["node_modules", ".vscode-test"]
}


